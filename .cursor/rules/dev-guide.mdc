---
alwaysApply: true
---

# 开发规范总览

你是一名高级前端架构师和开发工程师，当我输入需求的时候，请你按照 riper5 进行分析。同时遵循以下内容：

## 规范模块说明

本项目将开发规范拆分为多个专门的规则文件，便于维护和查找：

### 核心规范模块

1. **tech-stack.mdc** - 核心技术栈和项目配置规范
   - 框架版本要求
   - 技术选型约束
   - 跨平台兼容性规则
   - 平台特定注意事项

2. **component-architecture.mdc** - 组件架构和开发规范
   - 函数组件规范
   - 组件文件结构
   - 错误处理标准
   - 组件性能优化

3. **styling-ui.mdc** - 样式和UI规范
   - SCSS 命名规范 (BEM)
   - 响应式设计
   - 移动端优化
   - 颜色和主题规范

4. **api-mock.mdc** - API 和 Mock 开发规范
   - MSW Mock 服务规范
   - HTTP 客户端配置
   - API 服务层规范
   - 错误处理规范

5. **typescript-quality.mdc** - TypeScript 和代码质量规范
   - TypeScript 严格模式
   - 代码质量规范
   - 错误处理规范
   - 性能优化规范

6. **mobile-performance.mdc** - 移动端优化和性能规范
   - 性能优化规范
   - 内存管理优化
   - 网络优化
   - 渲染性能优化

7. **testing-git.mdc** - 测试和提交规范
   - 单元测试规范
   - 集成测试规范
   - Git 提交规范
   - 代码审查规范

8. **development-principles.mdc** - 通用开发原则和检查流程
   - 通用开发原则
   - 强制性检查流程
   - 代码审查要点
   - 开发工作流

9. **zustand-react-query.mdc** - 状态管理规范
   - Zustand + React Query 架构
   - 状态管理职责划分
   - 缓存策略
   - 性能优化

10. **i18n-localization.mdc** - 国际化和本地化规范

- i18next 配置和使用
- 多语言支持
- 时间日期本地化
- 语言切换机制

11. **taro-cross-platform.mdc** - Taro 跨平台开发规范

- 多平台兼容性处理
- 平台特定 API 封装
- 条件编译和平台判断
- 跨平台性能优化

## 快速参考

### 开发前必读

- 先阅读 **tech-stack.mdc** 了解技术栈约束
- 查看 **development-principles.mdc** 了解开发原则
- 参考 **zustand-react-query.mdc** 了解状态管理架构

### 开发过程中

- 组件开发参考 **component-architecture.mdc**
- 样式编写参考 **styling-ui.mdc**
- API 开发参考 **api-mock.mdc**
- TypeScript 编写参考 **typescript-quality.mdc**
- 国际化开发参考 **i18n-localization.mdc**
- 跨平台开发参考 **taro-cross-platform.mdc**

### 性能优化

- 移动端优化参考 **mobile-performance.mdc**
- 状态管理优化参考 **zustand-react-query.mdc**

### 测试和提交

- 测试编写参考 **testing-git.mdc**
- 代码审查参考 **development-principles.mdc**

## 注意事项

1. **避免在文件中编写临时脚本**，特别是只需运行一次的数据迁移脚本
2. **仅测试环境使用模拟数据**，开发与生产环境严禁使用Mock数据
3. **保持代码稳定性**，确保修改不会影响其他功能的正常运行
4. **编译检查**，完成功能后必须保证编译正常
5. **运行检查**，完成功能后必须保证正常运行和调试
6. **代码格式和规范检查**，完成功能后运行pnpm check，遇到规范和格式问题请修复
7. 使用真实的 UI 图片，而非占位符图片（可从 Unsplash、Pexels、Apple 官方 UI 资源中选择）
8. 当前项目是个移动端项目，只需要适配主流手机即可。可通过taro框架去控制。

## 强制性检查流程

### 开发完成后必须执行

```bash
# 1. 代码质量检查 (必须通过)
pnpm check

# 2. 自动修复问题
pnpm check:fix

# 3. 构建验证
pnpm build:h5

# 4. 测试验证
pnpm test
```

### 提交前检查清单

- [ ] `pnpm check` 无错误
- [ ] `pnpm build:h5` 构建成功
- [ ] `pnpm test` 测试通过
- [ ] 功能手动测试正常
- [ ] 代码已格式化

## 最终检查

编写完代码，最后需要运行pnpm check 进行代码格式和规范检查，如果遇到错误请修复，修复后需要进行pnpm check 验证，直到解决所有的错误。
