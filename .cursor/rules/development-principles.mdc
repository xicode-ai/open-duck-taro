---
alwaysApply: true
---

# 通用开发原则和检查流程

## 通用开发原则

- **开发座右铭**: 简单、重用、稳定、可维护 🎯
- 始终优先选择简单方案
- 尽可能避免代码重复
    • 修改代码前，检查代码库中是否已存在相似功能或逻辑。
- 编写代码时需区分不同环境
    • 明确区分开发环境（dev）、测试环境（test）和生产环境（prod）。
- 谨慎修改代码
    • 仅针对明确需求进行更改，或确保修改内容与需求强相关且已被充分理解。
- 修复问题时避免引入新技术/模式
    • 优先彻底排查现有实现的可能性，若必须引入新方案，需同步移除旧逻辑以避免冗余。
- 保持代码库整洁有序
- 控制单文件代码行数
    • 文件代码超过 200-300行 时需重构封装。
- **架构设计**：考虑代码的可维护性、可扩展性和性能需求
- **命名规范**：使用描述性的变量、函数和类名，反映其用途和含义
- **DRY 原则**：避免重复代码，提取共用逻辑到单独的函数或类
- **注释文档**：为复杂逻辑添加注释，编写清晰的文档说明功能和用法
- **风格一致**：遵循项目或语言的官方风格指南和代码约定
- **利用生态**：优先使用成熟的库和工具，避免不必要的自定义实现。比如taro有很多插件和组件可以优先使用。
- **异常处理**：正确处理边缘情况和错误，提供有用的错误信息 ，可通过react 错误边界的概念实现
- 在 Taro 中尺寸单位建议使用 px、 百分比 %，Taro 默认会对所有单位进行转换
- **mock接口**：基于前后端分离开发原则，前端通过MSW,进行接口mock。

## 强制性检查流程

### 开发完成后必须执行

```bash
# 1. 代码质量检查 (必须通过)
pnpm check

# 2. 自动修复问题
pnpm check:fix

# 3. 构建验证
pnpm build:h5

# 4. 测试验证
pnpm test
```

### 提交前检查清单

- [ ] `pnpm check` 无错误
- [ ] `pnpm build:h5` 构建成功
- [ ] `pnpm test` 测试通过
- [ ] 功能手动测试正常
- [ ] 代码已格式化

## 代码审查要点

1. **功能完整性**: 是否实现了需求
2. **代码质量**: 是否通过所有检查
3. **性能影响**: 是否影响应用性能
4. **安全性**: 是否存在安全隐患
5. **可维护性**: 代码是否易于理解和维护

## 最终检查

编写完代码，最后需要运行pnpm check 进行代码格式和规范检查，如果遇到错误请修复，修复后需要进行pnpm check 验证，直到解决所有的错误。

## 开发工作流

### 功能开发流程

1. **需求分析**
   - 理解需求细节
   - 识别技术难点
   - 评估开发时间

2. **技术设计**
   - 选择合适的技术方案
   - 设计组件结构
   - 规划数据流

3. **编码实现**
   - 遵循编码规范
   - 编写单元测试
   - 及时提交代码

4. **测试验证**
   - 单元测试通过
   - 集成测试通过
   - 手动测试验证

5. **代码审查**
   - 自检代码质量
   - 同事代码审查
   - 修复审查问题

6. **部署发布**
   - 构建验证
   - 部署到测试环境
   - 生产环境发布

### 问题修复流程

1. **问题定位**
   - 复现问题
   - 分析根本原因
   - 确定影响范围

2. **修复方案**
   - 选择最小影响方案
   - 避免引入新问题
   - 考虑向后兼容

3. **修复实施**
   - 编写修复代码
   - 添加回归测试
   - 验证修复效果

4. **测试验证**
   - 修复功能测试
   - 相关功能测试
   - 性能影响测试

5. **发布部署**
   - 代码审查
   - 构建验证
   - 分阶段发布

## 代码质量保证

### 代码规范检查

```bash
# 代码格式检查
pnpm check

# 自动修复格式问题
pnpm check:fix

# 类型检查
pnpm type-check

# 构建检查
pnpm build:h5
```

### 性能检查

```bash
# 包大小分析
pnpm analyze

# 性能测试
pnpm test:performance

# 内存泄漏检查
pnpm test:memory
```

### 安全检查

```bash
# 依赖安全检查
pnpm audit

# 代码安全扫描
pnpm security:scan

# 敏感信息检查
pnpm security:secrets
```

## 环境管理

### 开发环境

```bash
# 启动开发服务器
pnpm dev:h5

# 启动微信小程序开发
pnpm dev:weapp

# 启动测试环境
pnpm test:watch

# MSW Mock 服务初始化
pnpm msw:init
```

### 测试环境

```bash
# 构建测试版本
pnpm build:test

# 部署到测试环境
pnpm deploy:test

# 运行 E2E 测试
pnpm test:e2e
```

### 生产环境

```bash
# 构建生产版本
pnpm build:prod

# 部署到生产环境
pnpm deploy:prod

# 生产环境监控
pnpm monitor:prod
```

## 版本管理

### 版本号规范

遵循 [语义化版本](https://semver.org/lang/zh-CN/) 规范：

- **主版本号**：不兼容的 API 修改
- **次版本号**：向下兼容的功能性新增
- **修订号**：向下兼容的问题修正

### 分支管理

```bash
# 主分支
main          # 生产环境代码
develop       # 开发环境代码

# 功能分支
feature/user-auth     # 用户认证功能
feature/payment       # 支付功能

# 修复分支
hotfix/login-bug      # 登录问题修复
hotfix/security-fix   # 安全漏洞修复

# 发布分支
release/v1.2.0        # 版本发布
```

### 发布流程

1. **准备发布**

   ```bash
   git checkout develop
   git pull origin develop
   pnpm version patch  # 或 minor, major
   ```

2. **创建发布分支**

   ```bash
   git checkout -b release/v1.2.0
   git push origin release/v1.2.0
   ```

3. **测试验证**

   ```bash
   pnpm test
   pnpm build:prod
   pnpm test:e2e
   ```

4. **合并到主分支**

   ```bash
   git checkout main
   git merge release/v1.2.0
   git tag v1.2.0
   git push origin main --tags
   ```

5. **清理分支**
   ```bash
   git branch -d release/v1.2.0
   git push origin --delete release/v1.2.0
   ```

## 文档维护

### 代码文档

- **README.md**: 项目概述和快速开始
- **CHANGELOG.md**: 版本更新记录
- **API.md**: API 接口文档
- **CONTRIBUTING.md**: 贡献指南

### 技术文档

- **架构设计**: 系统架构和设计决策
- **组件文档**: 组件使用说明和示例
- **部署文档**: 部署流程和环境配置
- **故障排除**: 常见问题和解决方案

### 文档更新原则

1. **及时更新**: 代码变更时同步更新文档
2. **准确完整**: 确保文档内容准确完整
3. **易于理解**: 使用清晰简洁的语言
4. **示例丰富**: 提供充足的代码示例

## 团队协作

### 代码协作规范

1. **及时沟通**: 遇到问题及时与团队沟通
2. **代码审查**: 所有代码必须经过审查
3. **知识分享**: 定期分享技术经验和最佳实践
4. **持续学习**: 保持技术更新和学习

### 沟通渠道

- **技术讨论**: 使用技术群组讨论技术问题
- **代码审查**: 使用 Pull Request 进行代码审查
- **问题反馈**: 使用 Issue 跟踪问题和需求
- **文档更新**: 使用 Wiki 维护项目文档

## 持续改进

### 代码质量改进

1. **定期重构**: 定期重构代码提高质量
2. **性能优化**: 持续优化应用性能
3. **安全加固**: 定期进行安全检查和加固
4. **测试完善**: 不断完善测试覆盖率

### 流程优化

1. **工具改进**: 持续改进开发工具和流程
2. **自动化**: 提高自动化程度减少人工操作
3. **监控完善**: 完善监控和告警机制
4. **文档完善**: 持续完善项目文档

### 学习成长

1. **技术分享**: 定期进行技术分享
2. **代码评审**: 通过代码评审学习最佳实践
3. **外部学习**: 关注行业动态和技术趋势
4. **实践总结**: 总结项目经验形成最佳实践
